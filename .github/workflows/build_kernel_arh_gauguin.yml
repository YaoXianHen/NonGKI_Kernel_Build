name: Build Kernel Arch Xiaomi Redmi Note 9 Pro 5G Series (Official A15) with KSU and SUSFS
on:
  workflow_call:
  workflow_dispatch:
env:
  PYTHON_VERSION: "3" # Only 2(Ubuntu 22.04) or 3(Any OS Versions).
  PACK_METHOD: "Anykernel3" # Anykernel3 need SOURCE and BRANCH, MKBOOTIMG needn't it.
  KERNELSU_METHOD: "shell" # shell, manual and only.
  PATCHES_SOURCE: "JackA1ltman/NonGKI_Kernel_Patches" # [your_name]/[your_patch] -> gooder123/NonGKI_Patcher
  PATCHES_BRANCH: "mi_kernel" # [your_branch] -> main
  HOOK_METHOD: "normal" # manual hook method,can choice syscall and normal.
  PROFILE_NAME: "gaugin_los22.env" # your profile name.
  KERNELSU_SUS_PATCH: "true" # if u need manual susfs patch to kernelsu.
  KPM_ENABLE: "true" # Only use it for SukiSU-Ultra.
  KPM_PATCH_SOURCE: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux"" # patch exec file source -> raw.githubusercontent.com/Test/Test/patch .
  GENERATE_DTB: "false" # if u kernel need DTB , but cannot auto generate it. (Only Anykernel3).
  GENERATE_CHIP: "qcom" # only supported for qcom and mediatek.
  BUILD_DEBUGGER: "true" # Output build errors.
  BUILD_OTHER_CONFIG: "falae" # Merge config files.


jobs:
  build:
    name: Build Kernel by ${{ github.actor }} in Arch Linux
    runs-on: ubuntu-latest
    container: archlinux/archlinux:latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME
              DEVICE_CODENAME
              CUSTOM_CMDS
              EXTRA_CMDS
              KERNEL_SOURCE
              KERNEL_BRANCH
              CLANG_SOURCE
              CLANG_BRANCH
              GCC_GNU
              GCC_64_SOURCE
              GCC_64_BRANCH
              GCC_32_SOURCE
              GCC_32_BRANCH
              DEFCONFIG_SOURCE
              DEFCONFIG_NAME
              DEFCONFIG_ORIGIN_IMAGE
              KERNELSU_SOURCE
              KERNELSU_BRANCH
              KERNELSU_NAME
              SUSFS_ENABLE
              SUSFS_FIXED
              AK3_SOURCE
              AK3_BRANCH
              BOOT_SOURCE
              LXC_ENABLE
              HAVE_NO_DTBO
              HAVE_NO_DTBO_TOOL
              ROM_TEXT

          )

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

          # Move patch folder to tmp
          mv $GITHUB_WORKSPACE/Patches /tmp/

      - name: Install necessary packages
        run: |
          cat /etc/os-release

          pacman -Syyu --noconfirm
          pacman -S git base-devel systemd wget rustup curl patch ccache automake flex lzop bison gperf zip curl bzip2 squashfs-tools pngcrush schedtool make optipng maven pwgen minicom bc unzip 7zip zstd binutils gcc python3 wget which --noconfirm

          # Update Rust Toolchain
          rustup default stable

      - name: Install GNU GCC
        if: env.GCC_GNU == 'true'
        run: |
          if [ -z ${{ env.GCC_64_SOURCE }} ] && [ -z ${{ env.GCC_32_SOURCE }} ]; then
            pacman -S aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-glibc aarch64-linux-gnu-linux-api-headers --noconfirm
            pacman -S arm-none-eabi-binutils arm-none-eabi-gcc --noconfirm
            echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
            echo "GCC_32=CROSS_COMPILE_ARM32=arm-none-eabi-" >> $GITHUB_ENV
          else
            echo "You needn't gcc powered by system."
          fi

      - name: Set Compile Environment
        run: |
          cd $GITHUB_WORKSPACE

          # Set GCC Aarch64
          if [ -z "${{ env.GCC_64_SOURCE }}" ]; then
            echo "Not set GCC 64!"
          else
            if [[ "${{ env.GCC_64_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_64_SOURCE }} -b ${{ env.GCC_64_BRANCH }} gcc-64 --depth=1
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-64.tar.gz ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -zxvf gcc-64.tar.gz
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-64.zip ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
            fi
            GCC_64_BIN=aarch64-linux-android-
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-64/bin/$GCC_64_BIN" >> $GITHUB_ENV
          fi


          # Set GCC ARM32
          if [ -z "