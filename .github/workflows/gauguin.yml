name: Gauguin Kernel Build

on:
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Kernel Version'
        required: true
        default: '4.14'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v3
        with:
          path: kernel
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Add base64 preprocessor script
        run: |
          mkdir -p scripts
          cat > scripts/preprocess_base64.py << 'EOF'
          #!/usr/bin/env python3
          import re
          import sys
          import base64
          import os

          def process_file(input_path, output_path):
              """处理汇编文件，将.base64指令转换为.byte指令"""
              try:
                  with open(input_path, 'r') as f:
                      content = f.read()
                  
                  # 使用正则表达式查找所有.base64指令
                  # 匹配模式: .base64 "base64_string"
                  pattern = re.compile(r'^\s*\.base64\s+"([^"]+)"\s*$', re.MULTILINE)
                  
                  def replace_base64(match):
                      b64_data = match.group(1)
                      try:
                          # 解码Base64数据
                          binary_data = base64.b64decode(b64_data)
                          # 转换为.byte指令格式
                          byte_values = ', '.join(str(byte) for byte in binary_data)
                          return f'.byte {byte_values}'
                      except Exception as e:
                          print(f"Error decoding base64 at line {match.start()}: {e}", file=sys.stderr)
                          return match.group(0)  # 如果解码失败，保持原样
                  
                  # 替换所有匹配项
                  processed_content = pattern.sub(replace_base64, content)
                  
                  # 写入处理后的文件
                  with open(output_path, 'w') as f:
                      f.write(processed_content)
                  
                  return True
              except Exception as e:
                  print(f"Error processing file {input_path}: {e}", file=sys.stderr)
                  return False

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print(f"Usage: {sys.argv[0]} <input_file> <output_file>", file=sys.stderr)
                  sys.exit(1)
              
              input_file = sys.argv[1]
              output_file = sys.argv[2]
              
              if process_file(input_file, output_file):
                  sys.exit(0)
              else:
                  sys.exit(1)
          EOF
          chmod +x scripts/preprocess_base64.py

      - name: Patch Makefile to preprocess assembly files
        working-directory: kernel
        run: |
          # 修改Makefile，在编译汇编文件前加入预处理步骤
          sed -i '/^AS\t\t:=\t$(CROSS_COMPILE)as/i AS_PREPROCESS := $(srctree)/scripts/preprocess_base64.py' Makefile
          sed -i '/^%.o: %.s/a \t@echo "Preprocessing assembly file: $<"; $(AS_PREPROCESS) $< $@.tmp' Makefile
          sed -i '/^%.o: %.s/a \t$(AS) $(AFLAGS) -o $@ $@.tmp' Makefile
          sed -i '/^%.o: %.s/a \t@rm -f $@.tmp' Makefile

      - name: Set up toolchain
        run: |
          mkdir -p toolchain
          cd toolchain
          wget https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/heads/master.tar.gz
          tar -xzf master.tar.gz -C aarch64-linux-android-4.9
          rm master.tar.gz

      - name: Build kernel
        working-directory: kernel
        env:
          ARCH: arm64
          SUBARCH: arm64
          CROSS_COMPILE: ${{ github.workspace }}/toolchain/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          KBUILD_BUILD_USER: builder
          KBUILD_BUILD_HOST: github
        run: |
          export PATH="${{ github.workspace }}/toolchain/aarch64-linux-android-4.9/bin:$PATH"
          make vendor/atoll-perf_defconfig
          make -j$(nproc) Image.gz dtbo.img modules

      - name: Create AnyKernel3 zip
        working-directory: kernel
        run: |
          git clone https://github.com/osm0sis/AnyKernel3 -b master AnyKernel3
          cp arch/arm64/boot/Image.gz AnyKernel3/
          cp arch/arm64/boot/dtbo.img AnyKernel3/
          cd AnyKernel3
          zip -r9 ../Gauguin-Kernel.zip * -x .git README.md

      - name: Upload kernel zip
        uses: actions/upload-artifact@v3
        with:
          name: Gauguin-Kernel
          path: kernel/Gauguin-Kernel.zip    
