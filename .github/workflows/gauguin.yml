name: Build Kernel Arch Xiaomi Redmi Note 9 Pro 5G Series (Official A15) with KSU and SUSFS
on:
  workflow_call:
  workflow_dispatch:
env:
  PYTHON_VERSION: "3"
  PACK_METHOD: "Anykernel3"
  KERNELSU_METHOD: "shell"
  PATCHES_SOURCE: false
  PATCHES_BRANCH: false
  HOOK_METHOD: "normal"
  PROFILE_NAME: "gauguin.env"
  KERNELSU_SUS_PATCH: "true"
  KPM_ENABLE: "true"
  KPM_PATCH_SOURCE: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux"
  GENERATE_DTB: "false"
  GENERATE_CHIP: "qcom"
  BUILD_DEBUGGER: "false"
  BUILD_OTHER_CONFIG: "false"

jobs:
  build:
    name: Build Kernel by ${{ github.actor }} in Arch Linux
    runs-on: ubuntu-latest
    container: archlinux/archlinux:latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v4

    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
        declare -a CONFIG_LIST=(
          DEVICE_NAME DEVICE_CODENAME CUSTOM_CMDS EXTRA_CMDS 
          KERNEL_SOURCE KERNEL_BRANCH CLANG_SOURCE CLANG_BRANCH 
          GCC_GNU GCC_64_SOURCE GCC_64_BRANCH GCC_32_SOURCE GCC_32_BRANCH 
          DEFCONFIG_SOURCE DEFCONFIG_NAME DEFCONFIG_ORIGIN_IMAGE 
          KERNELSU_SOURCE KERNELSU_BRANCH KERNELSU_NAME 
          SUSFS_ENABLE SUSFS_FIXED SUSFS_UPDATE 
          AK3_SOURCE AK3_BRANCH BOOT_SOURCE 
          LXC_ENABLE HAVE_NO_DTBO HAVE_NO_DTBO_TOOL ROM_TEXT
        )
        
        for CONFIG in "${CONFIG_LIST[@]}"; do
          if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
            echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          else
            echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          fi
        done
        
        mv $GITHUB_WORKSPACE/Patches /tmp/
        mv $GITHUB_WORKSPACE/Bin /tmp/
        chmod 777 /tmp/Bin/curlx.sh
        echo "CURLX=/tmp/Bin/curlx.sh" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        pacman -Syyu --noconfirm \
        cpio git base-devel systemd wget rustup curl patch ccache automake flex \
        lzop bison gperf zip bzip2 squashfs-tools pngcrush schedtool make optipng maven pwgen \
        minicom bc unzip zstd binutils gcc python3 which libxml2-legacy 7-zip

        rustup default stable

    - name: Install GNU GCC
      if: env.GCC_GNU == 'true' && (env.GCC_64_SOURCE == '' || env.GCC_32_SOURCE == '')
      run: |
        sudo pacman -S aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-glibc \
          aarch64-linux-gnu-linux-api-headers arm-none-eabi-binutils arm-none-eabi-gcc \
          arm-none-eabi-newlib --noconfirm
        echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "GCC_32=CROSS_COMPILE_ARM32=arm-none-eabi-" >> $GITHUB_ENV

    - name: Set Compile Environment
      run: |
        cd $GITHUB_WORKSPACE
        cp /tmp/Patches/found_gcc.sh ./
        
        # 统一编译器设置函数
        setup_compiler() {
          local type=$1 source=$2 branch=$3 dir=$4
          if [[ -z "$source" ]]; then return; fi
          
          case $source in
            *.git) git clone $source -b $branch $dir --depth=1 ;;
            *.tar.gz) $CURLX $source $dir.tar.gz; mkdir $dir; tar -C $dir/ -zxvf $dir.tar.gz ;;
            *.tar.xz) $CURLX $source $dir.tar.xz; mkdir $dir; tar -C $dir/ -xvf $dir.tar.xz --strip-components 1 ;;
            *.zip) $CURLX $source $dir.zip; mkdir $dir; unzip $dir.zip -d $dir/ ;;
            *antman) mkdir $dir; cd $dir; $CURLX $source antman; chmod +x antman; ./antman -S ;;
          esac
          
          if [[ $type == "GCC_64" ]]; then
            bash found_gcc.sh GCC_64
          elif [[ $type == "GCC_32" ]]; then
            bash found_gcc.sh $([[ -z "$GCC_64_SOURCE" ]] && echo "GCC_32_ONLY" || echo "GCC_32")
          fi
        }
        
        # 设置编译器
        setup_compiler "GCC_64" "$GCC_64_SOURCE" "$GCC_64_BRANCH" "gcc-64"
        setup_compiler "GCC_32" "$GCC_32_SOURCE" "$GCC_32_BRANCH" "gcc-32"
        setup_compiler "CLANG" "$CLANG_SOURCE" "$CLANG_BRANCH" "clang-custom"

    - name: Get Kernel Source
      run: |
        cd $GITHUB_WORKSPACE
        git clone --recursive $KERNEL_SOURCE -b $KERNEL_BRANCH device_kernel --depth=1
        
        if [[ -n "$DEFCONFIG_SOURCE" ]]; then
          config_path="device_kernel/arch/$( [[ -d "device_kernel/arch/arm64/configs" ]] && echo "arm64" || echo "arm" )/configs"
          $CURLX $DEFCONFIG_SOURCE $config_path/$DEFCONFIG_NAME
        elif [[ -n "$DEFCONFIG_ORIGIN_IMAGE" ]]; then
          $CURLX $DEFCONFIG_ORIGIN_IMAGE $GITHUB_WORKSPACE/device_kernel/Image
          extract_cmd="$GITHUB_WORKSPACE/device_kernel/scripts/extract-ikconfig $GITHUB_WORKSPACE/device_kernel/Image"
          config_path="device_kernel/arch/$( [[ -d "device_kernel/arch/arm64/configs" ]] && echo "arm64" || echo "arm" )/configs"
          $extract_cmd > $config_path/$DEFCONFIG_NAME
        fi
        
        # 提取内核版本信息
        KERNEL_VERSION=$(awk '/^VERSION|^PATCHLEVEL/ {v=v $3 "."} END {sub(/\.$/,"",v); print v}' device_kernel/Makefile)
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "FIRST_VERSION=${KERNEL_VERSION%%.*}" >> $GITHUB_ENV
        echo "SECOND_VERSION=$(echo $KERNEL_VERSION | cut -d. -f2)" >> $GITHUB_ENV

    - name: Set KSU and SUSFS for DEFCONFIG
      run: |
        cd $GITHUB_WORKSPACE/device_kernel
        ARCH=$( [[ -d "arch/arm64/configs" ]] && echo "arm64" || echo "arm" )
        CONFIG_FILE="./arch/$ARCH/configs/$DEFCONFIG_NAME"
        
        # 使用heredoc添加配置
        cat <<EOF >> $CONFIG_FILE
        CONFIG_KSU=y
        $([[ "$KERNELSU_SOURCE" == *rsuntk* || "$KERNELSU_SOURCE" == *SukiSU* ]] && echo "CONFIG_KSU_MANUAL_HOOK=y")
        $([[ "$KERNELSU_SOURCE" == *SukiSU* && "$KPM_ENABLE" == "true" ]] && echo "CONFIG_KALLSYMS=y\nCONFIG_KALLSYMS_ALL=y")
        $([[ "$SUSFS_ENABLE" == "true" ]] && echo "CONFIG_KSU_SUSFS=y\nCONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y\nCONFIG_KSU_SUSFS_SUS_PATH=y\nCONFIG_KSU_SUSFS_SUS_MOUNT=y\nCONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y\nCONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y\nCONFIG_KSU_SUSFS_SUS_KSTAT=y\n# CONFIG_KSU_SUSFS_SUS_OVERLAYFS is not set\nCONFIG_KSU_SUSFS_TRY_UMOUNT=y\nCONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y\nCONFIG_KSU_SUSFS_SPOOF_UNAME=y\nCONFIG_KSU_SUSFS_ENABLE_LOG=y\nCONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y\nCONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y\nCONFIG_KSU_SUSFS_OPEN_REDIRECT=y")
        $([[ "$LXC_ENABLE" == "true" ]] && echo "CONFIG_VIRTUALIZATION=y\nCONFIG_KVM=y\nCONFIG_VHOST_NET=y\nCONFIG_VHOST_CROSS_ENDIAN_LEGACY=y")
        EOF

    - name: Disable LTO in defconfig
      run: |
        cd $GITHUB_WORKSPACE/device_kernel
        ARCH=$( [[ -d "arch/arm64/configs" ]] && echo "arm64" || echo "arm" )
        CONFIG_FILE="./arch/$ARCH/configs/$DEFCONFIG_NAME"
        
        sed -i '/CONFIG_LTO/d; /CONFIG_THINLTO/d' $CONFIG_FILE
        echo -e "# CONFIG_LTO is not set\n# CONFIG_LTO_CLANG_THIN is not set" >> $CONFIG_FILE

    - name: Set Pack Method and KernelSU and SUSFS
      run: |
        cd $GITHUB_WORKSPACE/device_kernel
        SUSFS_SOURCE="https://gitlab.com/simonpunk/susfs4ksu.git"
        SUSFS_BRANCH="kernel-$KERNEL_VERSION"
        
        # 设置打包方法
        if [[ $PACK_METHOD == "Anykernel3" ]]; then
          [[ ! -d "Anykernel3" ]] && git clone $AK3_SOURCE -b $AK3_BRANCH Anykernel3 --depth=1
        elif [[ $PACK_METHOD == "MKBOOTIMG" ]]; then
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg mkboottools -b main-kernel-build-2024 --depth=1
          $CURLX $BOOT_SOURCE $GITHUB_WORKSPACE/boot_source_$DEVICE_NAME.img
        fi
        
        # 设置KernelSU
        case $KERNELSU_METHOD in
          shell)
            [[ "$KERNELSU_SOURCE" != *".sh" ]] && echo "Invalid shell source" && exit 1
            curl -sSL $KERNELSU_SOURCE | bash -s $KERNELSU_BRANCH
            ;;
          manual)
            [[ "$KERNELSU_SOURCE" != *".git" ]] && echo "Invalid git source" && exit 1
            rm -rf KernelSU KernelSU-Next
            git clone $KERNELSU_SOURCE -b $KERNELSU_BRANCH $KERNELSU_NAME
            ln -sf "../$KERNELSU_NAME/kernel" drivers/kernelsu
            grep -q "kernelsu" "drivers/Makefile" || echo "obj-\$(CONFIG_KSU) += kernelsu/" >> drivers/Makefile
            grep -q "kernelsu" "drivers/Kconfig" || sed -i "/endmenu/i source \"drivers/kernelsu/Kconfig\"" drivers/Kconfig
            ;;
          only)
            [[ "$KERNELSU_SOURCE" != *".git" ]] && echo "Invalid git source" && exit 1
            rm -rf *KernelSU* drivers/kernelsu
            git clone $KERNELSU_SOURCE -b $KERNELSU_BRANCH $KERNELSU_NAME
            ln -sf "../$KERNELSU_NAME/kernel" drivers/kernelsu
            ;;
        esac
        
        KSU_VERSION=$(cd $KERNELSU_NAME && git rev-list --count HEAD | awk '{print $1+10200}')
        echo "UPLOADNAME=-${KERNELSU_NAME}_$KSU_VERSION" >> $GITHUB_ENV
        
        # KPM 检查
        if [[ -d "$KERNELSU_NAME/kernel/kpm" && "$KPM_ENABLE" == "true" ]]; then
          if [ -f "include/linux/set_memory.h" ]; then
            echo "CONFIG_KPM=y" >> ./arch/arm64/configs/$DEFCONFIG_NAME
            $CURLX "$KPM_PATCH_SOURCE" patch
            chmod a+x patch
          elif [ "$FIRST_VERSION" -lt 5 ] && [ "$SECOND_VERSION" -lt 10 ]; then
            cp /tmp/Patches/Patch/set_memory_to_49_and_low.patch ./
            patch -p1 < set_memory_to_49_and_low.patch || true
          fi
        fi
        
        # 设置SUSFS
        if [[ "$SUSFS_ENABLE" == "true" ]]; then
          git clone $SUSFS_SOURCE -b $SUSFS_BRANCH susfs4ksu --depth=1
          cp susfs4ksu/kernel_patches/fs/* fs/
          cp susfs4ksu/kernel_patches/include/linux/* include/linux/
        fi

    - name: Fix Error When Enabling KPM
      if: env.KPM_ENABLE == 'true' && env.KPM_FIX == 'true'
      run: |
        cd $GITHUB_WORKSPACE/device_kernel
        cd $KERNELSU_NAME/kernel/kpm
        cp /tmp/Patches/Patch/fix_kpm.patch ./
        patch -p1 < fix_kpm.patch || true

    - name: Patch Kernel for no-kprobe
      run: |
        cd $GITHUB_WORKSPACE
        if grep -q "CONFIG_KSU" "device_kernel/fs/exec.c"; then
          echo "Skipping - kernel already patched"
        else
          case $HOOK_METHOD in
            normal)
              [[ -f "/tmp/Patches/normal_patches.sh" ]] || { echo "Missing normal_patches.sh"; exit 1; }
              cp /tmp/Patches/normal_patches.sh device_kernel/
              cd device_kernel
              bash normal_patches.sh
              [[ "$KERNELSU_NAME" != "KernelSU-Next" ]] && \
                { cp /tmp/Patches/backport_patches_early.sh ./; bash backport_patches_early.sh; }
              ;;
            syscall)
              if [[ "$HOOK_OLDER" == "true" && -f "/tmp/Patches/syscall_hook_patches_older.sh" ]]; then
                cp /tmp/Patches/syscall_hook_patches_older.sh device_kernel/
                cd device_kernel
                bash syscall_hook_patches_older.sh
              elif [[ -f "/tmp/Patches/syscall_hook_patches.sh" ]]; then
                cp /tmp/Patches/syscall_hook_patches.sh device_kernel/
                cd device_kernel
                bash syscall_hook_patches.sh
              else
                echo "Missing syscall hook patches"; exit 1
              fi
              
              if [[ "$KERNELSU_NAME" != "KernelSU-Next" ]]; then
                cp /tmp/Patches/backport_patches.sh ./
                bash backport_patches.sh
                if [ "$FIRST_VERSION" -lt 5 ] && [ "$SECOND_VERSION" -lt 10 ]; then
                  cp /tmp/Patches/Patch/backport_kernel_read_and_kernel_write_to_ksu.patch ./
                  patch -p1 < backport_kernel_read_and_kernel_write_to_ksu.patch || true
                fi
              fi
              ;;
          esac
        fi

    - name: Added mkdtboimg to kernel (Experiment)
      if: env.HAVE_NO_DTBO == 'true' && env.HAVE_NO_DTBO_TOOL != 'true'
      run: |
        cd $GITHUB_WORKSPACE/device_kernel/scripts/dtc
        $CURLX https://android.googlesource.com/platform/system/libufdt/+archive/refs/heads/main/utils/src.tar.gz src.tar.gz
        tar zxvf src.tar.gz && rm src.tar.gz
        
        cd $GITHUB_WORKSPACE/device_kernel
        sed -i '/targets := Image Image.bz2 Image.gz Image.lz4 Image.lzma Image.lzo/s/$/ dtbo.img/' arch/arm64/boot/Makefile
        sed -i '/# Add RTIC DTB to the DTB list if RTIC MPGen is enabled/i DTBO_OBJS := $(shell find $(obj)/dts/ -name \\*.dtbo)\n' arch/arm64/boot/Makefile
        sed -i '/$(obj)\/Image\.gz-dtb: $(obj)\/Image\.gz $(DTB_OBJS) FORCE/a #DTBO\n$(obj)\/dtbo.img: $(DTBO_OBJS) FORCE\n\t$(call if_changed,mkdtimg)' arch/arm64/boot/Makefile
        sed -i '/KBUILD_DTBS\t:= dtbs/a #DTBO\nKBUILD_DTBO_IMG := dtbo.img' arch/arm64/Makefile
        sed -i '/PHONY += vdso_install/i ifeq ($(CONFIG_BUILD_ARM64_DT_OVERLAY),y)\n$(KBUILD_DTBO_IMG): dtbs\n\t$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@\n\nall: $(KBUILD_DTBO_IMG)\nendif' arch/arm64/Makefile
        sed -i '/dtc-tmp = $(subst $(comma),_,$(dot-target)\.dts\.tmp)/a # mkdtimg\nquiet_cmd_mkdtimg = DTBOIMG $@\ncmd_mkdtimg = python3 $(srctree)/scripts/dtc/mkdtboimg.py create $@ --page_size=4096 $(filter-out FORCE,$^)' scripts/Makefile.lib

    - name: Setup LXC (Experiment)
      if: env.LXC_ENABLE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/device_kernel
        ARCH=$( [[ -d "arch/arm64/configs" ]] && echo "arm64" || echo "arm" )
        
        rm -rf lxc
        git clone https://github.com/tomxi1997/lxc-docker-support-for-android.git lxc
        echo 'source "lxc/Kconfig"' >> Kconfig
        echo "CONFIG_DOCKER=y" >> arch/$ARCH/configs/$DEFCONFIG_NAME
        sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' arch/$ARCH/configs/$DEFCONFIG_NAME
        echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> arch/$ARCH/configs/$DEFCONFIG_NAME
        
        chmod +x lxc/runcpatch.sh
        [[ -f "kernel/cgroup/cgroup.c" ]] && sh lxc/runcpatch.sh kernel/cgroup/cgroup.c
        [[ -f "kernel/cgroup.c" ]] && sh lxc/runcpatch.sh kernel/cgroup.c
        [[ -f "net/netfilter/xt_qtaguid.c" ]] && patch -p0 < lxc/xt_qtaguid.patch
        
        echo "LXC_ENABLE=lxc" >> $GITHUB_ENV

    - name: Patch Kernel of SUSFS
      if: env.SUSFS_ENABLE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/device_kernel/
        cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-$KERNEL_VERSION.patch ./
        patch -p1 < 50_add_susfs_in_kernel-$KERNEL_VERSION.patch || true
        
        if [[ "$KERNELSU_NAME" == "KernelSU-Next" && "$KERNELSU_SOURCE" =~ ".sh" ]]; then
          git clone $KERNELSU_SOURCE -b ${KERNELSU_BRANCH}-susfs susfs_fixed
          rsync -av --exclude='.git' susfs_fixed/kernel/ KernelSU-Next/kernel/
        elif [[ "$KERNELSU_SUS_PATCH" == "true" ]]; then
          cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./$KERNELSU_NAME
          cd $KERNELSU_NAME
          patch -p1 < 10_enable_susfs_for_ksu.patch || true
        fi

    - name: Updated SUSFS Version
      if: env.SUSFS_ENABLE == 'true' && env.SUSFS_UPDATE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/device_kernel/
        
        # 应用SUSFS补丁
        apply_patch() {
          local patch_file=$1
          [[ -f "$patch_file" ]] && patch -p1 < "$patch_file" || true
        }
        
        apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_157.patch"
        
        if grep -q "CONFIG_KSU" "fs/exec.c"; then
          apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_158_$KERNEL_VERSION.patch"
        elif [[ "$KERNEL_VERSION" == "5.4" ]]; then
          apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_158_5.4_kprobe.patch"
        fi
        
        sed -i '/#define CMD_SUSFS_HIDE_SUS_MNTS_FOR_ALL_PROCS 0x55561/a #define CMD_SUSFS_UMOUNT_FOR_ZYGOTE_ISO_SERVICE 0x55562' include/linux/susfs_def.h
        
        apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_159.patch"
        
        if grep -q "CONFIG_KSU" "fs/exec.c"; then
          apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_1510_$KERNEL_VERSION.patch"
        elif [[ "$KERNEL_VERSION" == "5.4" ]]; then
          apply_patch "/tmp/Patches/Patch/susfs_upgrade_to_1510_5.4_kprobe.patch"
        fi

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Build Kernel
      run: |
        cd $GITHUB_WORKSPACE/device_kernel/
        export PATH=$GITHUB_WORKSPACE/clang-custom/bin:$PATH
        
        # 统一的构建函数
        build_kernel() {
          local arch=$1 compiler=$2
          make O=out ARCH=$arch $compiler $DEFCONFIG_NAME
          
          if [[ "$BUILD_OTHER_CONFIG" == "true" ]]; then
            for config in vendor/debugfs.config vendor/lahaina_QGKI.config; do
              ./scripts/kconfig/merge_config.sh -O out/ -m out/.config arch/$arch/configs/$config
            done
            make O=out ARCH=$arch $compiler olddefconfig
          fi
          
          make -j$(nproc --all) O=out ARCH=$arch $compiler 2>&1 | tee error.log
        }
        
        # 确定编译器参数
        if [[ -d "arch/arm64/configs" ]]; then
          ARCH=arm64
          [[ -n "$CLANG_SOURCE" ]] && CC="CC=ccache clang"
          [[ -n "$GCC_64" ]] && GCC64="$GCC_64"
          [[ -n "$GCC_32" ]] && GCC32="$GCC_32"
          
          compiler_args="$CC $CUSTOM_CMDS $EXTRA_CMDS $GCC64 $GCC32"
          build_kernel arm64 "$compiler_args"
        else
          build_kernel arm "$GCC_64"
        fi
        
        [[ -n "$(grep 'Error 2' error.log)" ]] && exit 1
        
        # 生成DTBO
        if [[ "$HAVE_NO_DTBO" == "true" && "$HAVE_NO_DTBO_TOOL" == "true" ]]; then
          cd $GITHUB_WORKSPACE/device_kernel
          mkdir -p dtbo_tool
          cd dtbo_tool
          $CURLX https://android.googlesource.com/platform/system/libufdt/+archive/master/utils.tar.gz mkdtboimg.tar.gz
          tar zxvf mkdtboimg.tar.gz
          
          dtb_path=""
          [[ -d "../out/arch/arm64/boot/dts/vendor/$GENERATE_CHIP" ]] && dtb_path="../out/arch/arm64/boot/dts/vendor/$GENERATE_CHIP"
          [[ -d "../out/arch/arm64/boot/dts/$GENERATE_CHIP" ]] && dtb_path="../out/arch/arm64/boot/dts/$GENERATE_CHIP"
          
          [[ -n "$dtb_path" ]] && \
            python src/mkdtboimg.py create ../out/arch/arm64/boot/dtbo.img $dtb_path/*.dtbo
        fi

    - name: Make Anykernel3 Flasher
      if: env.PACK_METHOD == 'Anykernel3'
      run: |
        TIME=$(date +"%Y%m%d%H%M%S")
        cd $GITHUB_WORKSPACE/device_kernel/
        ARCH=$( [[ -d "arch/arm64/configs" ]] && echo "arm64" || echo "arm" )
        IMAGE_DIR="out/arch/$ARCH/boot"
        mkdir -p tmp
        
        # 复制内核镜像
        if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
          cp -fp $IMAGE_DIR/Image.gz-dtb tmp
        elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
          cp -fp $IMAGE_DIR/Image.gz tmp
        elif [[ -f "$IMAGE_DIR/zImage-dtb" ]]; then
          cp -fp $IMAGE_DIR/zImage-dtb tmp
        elif [[ -f "$IMAGE_DIR/Image" ]]; then
          cp -fp $IMAGE_DIR/Image tmp
        fi
        
        # 复制DTBO和DTB
        [[ -f "$IMAGE_DIR/dtbo.img" ]] && cp -fp $IMAGE_DIR/dtbo.img tmp
        [[ -f "$IMAGE_DIR/dtb" ]] && cp -fp $IMAGE_DIR/dtb tmp
        
        # 自定义Anykernel3设置
        if [[ "$AK3_SOURCE" =~ "osm0sis" ]]; then
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g;
                   s!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g;
                   s/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' Anykernel3/anykernel.sh
        fi
        
        cp -rp Anykernel3/* tmp
        cd tmp
        7za a -mx9 tmp.zip *
        cd ..
        cp -fp tmp/tmp.zip $DEVICE_CODENAME-$ROM_TEXT-$TIME-$PACK_METHOD$LXC_ENABLE.zip
        rm -rf tmp
        
        echo "PACK_NAME=$DEVICE_CODENAME-$ROM_TEXT-$TIME-$PACK_METHOD$LXC_ENABLE.zip" >> $GITHUB_ENV

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-${{ env.PACK_NAME }}
        path: |
          ${{ env.PACK_NAME }}
