name: Build Kernel Arch Xiaomi Redmi Note 9 Pro 5G Series (Official A15) with KSU and SUSFS
on:
  workflow_call:
  workflow_dispatch:
env:
  PYTHON_VERSION: "3" # Only 2(Ubuntu 22.04) or 3(Any OS Versions).
  PACK_METHOD: "Anykernel3" # Anykernel3 need SOURCE and BRANCH, MKBOOTIMG needn't it.
  KERNELSU_METHOD: "shell" # shell, manual and only.
  PATCHES_SOURCE: false # [your_name]/[your_patch] -> gooder123/NonGKI_Patcher
  PATCHES_BRANCH: false # [your_branch] 
  HOOK_METHOD: "normal" # manual hook method,can choice syscall and normal.
  PROFILE_NAME: "gauguin.env" # your profile name.
  KERNELSU_SUS_PATCH: "true" # if u need manual susfs patch to kernelsu.
  KPM_ENABLE: "true" # Only use it for SukiSU-Ultra.
  KPM_PATCH_SOURCE: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU_patch/refs/heads/main/kpm/patch_linux" # patch exec file source -> raw.githubusercontent.com/Test/Test/patch .
  GENERATE_DTB: "false" # if u kernel need DTB , but cannot auto generate it. (Only Anykernel3).
  GENERATE_CHIP: "qcom" # only supported for qcom and mediatek.
  BUILD_DEBUGGER: "false" # Output build errors.
  BUILD_OTHER_CONFIG: "false" # Merge config files.

jobs:
  build:
    name: Build Kernel by ${{ github.actor }} in Arch Linux
    runs-on: ubuntu-latest
    container: archlinux/archlinux:latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /github/workspace/.ccache  # 显式设置ccache目录

    steps:
    - uses: actions/checkout@v4

    # ================= 优化点1: 添加详细注释 =================
    - name: "[优化] 准备配置环境"
      run: |
        echo "正在加载配置文件: Profiles/${{ env.PROFILE_NAME }}"
        CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
        
        # 配置项列表
        CONFIG_LIST=(
            DEVICE_NAME
            DEVICE_CODENAME
            CUSTOM_CMDS
            EXTRA_CMDS
            KERNEL_SOURCE
            KERNEL_BRANCH
            CLANG_SOURCE
            CLANG_BRANCH
            GCC_GNU
            GCC_64_SOURCE
            GCC_64_BRANCH
            GCC_32_SOURCE
            GCC_32_BRANCH
            DEFCONFIG_SOURCE
            DEFCONFIG_NAME
            DEFCONFIG_ORIGIN_IMAGE
            KERNELSU_SOURCE
            KERNELSU_BRANCH
            KERNELSU_NAME
            SUSFS_ENABLE
            SUSFS_FIXED
            SUSFS_UPDATE
            AK3_SOURCE
            AK3_BRANCH
            BOOT_SOURCE
            LXC_ENABLE
            HAVE_NO_DTBO
            HAVE_NO_DTBO_TOOL
            ROM_TEXT
        )

        # 提取配置到环境变量
        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                VALUE=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)
                echo "$CONFIG=${VALUE//\"/}" >> $GITHUB_ENV  # 移除可能的引号
            else
                VALUE=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)
                echo "$CONFIG=${VALUE//\"/}" >> $GITHUB_ENV  # 移除可能的引号
            fi
            echo "已设置 $CONFIG=${!CONFIG}"
        done

        # 移动资源文件
        echo "移动Patches和Bin目录到/tmp"
        [ -d "$GITHUB_WORKSPACE/Patches" ] && mv $GITHUB_WORKSPACE/Patches /tmp/
        [ -d "$GITHUB_WORKSPACE/Bin" ] && mv $GITHUB_WORKSPACE/Bin /tmp/

        # 设置curl工具
        if [ -f "/tmp/Bin/curlx.sh" ]; then
            chmod 777 /tmp/Bin/curlx.sh
            echo "CURLX=/tmp/Bin/curlx.sh" >> $GITHUB_ENV
            echo "CURLX工具已设置"
        else
            echo "警告: curlx.sh未找到, 使用系统curl"
            echo "CURLX=curl" >> $GITHUB_ENV
        fi

    # ================= 优化点2: 合并包安装步骤 =================
    - name: "[优化] 安装系统依赖"
      run: |
        echo "当前系统信息:"
        cat /etc/os-release
        
        # 设置清华镜像源加速安装
        echo "Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/\$repo/os/\$arch" > /etc/pacman.d/mirrorlist
        echo "Server = https://mirror.archlinuxarm.org/\$arch/\$repo" >> /etc/pacman.d/mirrorlist
        
        # 系统更新
        echo "正在更新系统..."
        pacman -Syyu --noconfirm --needed
        
        # 合并安装命令
        echo "正在安装构建依赖..."
        pacman -S --noconfirm --needed \
            git base-devel systemd wget rustup curl patch ccache automake flex \
            lzop bison gperf zip curl bzip2 squashfs-tools pngcrush schedtool \
            make optipng maven pwgen minicom bc unzip p7zip zstd binutils gcc \
            python3 which libxml2 cpio  # 添加缺失的cpio包
            
        # Rust工具链更新
        echo "配置Rust环境..."
        rustup default stable
        rustup component add rust-src

        # 清理缓存节省空间
        echo "清理包缓存..."
        pacman -Scc --noconfirm
        rm -rf /var/cache/pacman/pkg/*
        
        echo "系统依赖安装完成"

    # ================= 优化点3: 添加磁盘空间监控 =================
    - name: "[优化] 磁盘空间检查"
      run: |
        echo "当前磁盘使用情况:"
        df -h
        echo "工作空间使用情况:"
        du -sh $GITHUB_WORKSPACE

    - name: Install GNU GCC
      if: env.GCC_GNU == 'true'
      run: |
        # 添加安装前检查
        if [ -z "${{ env.GCC_64_SOURCE }}" ] && [ -z "${{ env.GCC_32_SOURCE }}" ]; then
          echo "安装系统GCC交叉编译器..."
          pacman -S --noconfirm --needed \
            aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc \
            aarch64-linux-gnu-glibc aarch64-linux-gnu-linux-api-headers \
            arm-none-eabi-binutils arm-none-eabi-gcc arm-none-eabi-newlib
          
          echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "GCC_32=CROSS_COMPILE_ARM32=arm-none-eabi-" >> $GITHUB_ENV
          echo "系统GCC编译器已设置"
        else
          echo "跳过系统GCC安装，使用自定义编译器"
        fi

    # ================= 后续步骤保持原有结构 =================
    # 此处省略中间未修改的步骤...
    # 原文件从"Set Compile Environment"到"Build Kernel"之间的内容保持不变

    # ================= 优化点4: 添加构建后清理 =================
    - name: "[优化] 构建后清理"
      run: |
        echo "清理临时文件..."
        rm -rf $GITHUB_WORKSPACE/device_kernel/out/arch/*/boot/dts
        rm -rf $GITHUB_WORKSPACE/clang-custom/lib/clang/*/lib/linux
        rm -rf $GITHUB_WORKSPACE/*.tar.*
        
        echo "当前磁盘使用情况:"
        df -h
        echo "工作空间使用情况:"
        du -sh $GITHUB_WORKSPACE

    # ================= 优化点5: 添加签名验证(示例) =================
    - name: "[安全] 内核签名验证(示例)"
      if: success()
      run: |
        echo "正在验证内核签名..."
        # 这里只是示例，实际需要根据项目添加签名验证逻辑
        if [ -f "$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/Image" ]; then
            file "$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot/Image"
            echo "内核文件验证通过"
        else
            echo "错误: 内核文件未生成!"
            exit 1
        fi

    # 后续打包和上传步骤保持不变...
    # 原文件从"Make Anykernel3 Flasher"到结尾的内容保持不变

# ================= 优化点6: 添加工作流元数据 =================
# 添加工作流描述和文档链接
metadata:
  description: "为Xiaomi Redmi Note 9 Pro 5G系列构建Android 15内核"
  documentation: "https://github.com/yourorg/kernel-build-docs"
